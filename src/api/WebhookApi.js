/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import ProblemHttpResult from '../model/ProblemHttpResult';
import WebHook from '../model/WebHook';
import WebHookHistory from '../model/WebHookHistory';

/**
* Webhook service.
* @module api/WebhookApi
* @version 1.0
*/
export default class WebhookApi {

    /**
    * Constructs a new WebhookApi. 
    * @alias module:api/WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List webhooks
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Object} opts Optional parameters
     * @param {Number} [companyId] Company id
     * @param {Number} [page = 1)] Page number.
     * @param {Number} [pageSize = 100)] Items per page. Cannot be greater than 200.
     * @param {String} [sort] Sort by field. Prefix with '-' for descending order.
     * @param {String} [description] 
     * @param {Boolean} [enabled] 
     * @param {String} [events] 
     * @param {String} [url] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebHook>} and HTTP response
     */
    webhookGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'company_id': opts['companyId'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'description': opts['description'],
        'enabled': opts['enabled'],
        'events': opts['events'],
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebHook];
      return this.apiClient.callApi(
        '/webhook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhooks
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.companyId Company id
     * @param {Number} opts.page Page number. (default to 1)
     * @param {Number} opts.pageSize Items per page. Cannot be greater than 200. (default to 100)
     * @param {String} opts.sort Sort by field. Prefix with '-' for descending order.
     * @param {String} opts.description 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.events 
     * @param {String} opts.url 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebHook>}
     */
    webhookGet(opts) {
      return this.webhookGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a webhook by id
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    webhookIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhookIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhook/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a webhook by id
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    webhookIdDelete(id) {
      return this.webhookIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a webhook by id
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    webhookIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhookIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhook/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a webhook by id
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    webhookIdGet(id) {
      return this.webhookIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a webhook
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    webhookPostWithHttpInfo(webHook) {
      let postBody = webHook;
      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling webhookPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a webhook
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    webhookPost(webHook) {
      return this.webhookPostWithHttpInfo(webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a webhook
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    webhookPutWithHttpInfo(webHook) {
      let postBody = webHook;
      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling webhookPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhook', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a webhook
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    webhookPut(webHook) {
      return this.webhookPutWithHttpInfo(webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhook history items
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number.
     * @param {Number} [pageSize = 100)] Items per page. Cannot be greater than 200.
     * @param {String} [sort] Sort by field. Prefix with '-' for descending order.
     * @param {Number} [webhookId] WebHook id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebHookHistory>} and HTTP response
     */
    webhookhistoryGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'webhook_id': opts['webhookId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebHookHistory];
      return this.apiClient.callApi(
        '/webhookhistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhook history items
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number. (default to 1)
     * @param {Number} opts.pageSize Items per page. Cannot be greater than 200. (default to 100)
     * @param {String} opts.sort Sort by field. Prefix with '-' for descending order.
     * @param {Number} opts.webhookId WebHook id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebHookHistory>}
     */
    webhookhistoryGet(opts) {
      return this.webhookhistoryGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a webhook history item by id
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHookHistory} and HTTP response
     */
    webhookhistoryIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhookhistoryIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebHookHistory;
      return this.apiClient.callApi(
        '/webhookhistory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a webhook history item by id
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHookHistory}
     */
    webhookhistoryIdGet(id) {
      return this.webhookhistoryIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
