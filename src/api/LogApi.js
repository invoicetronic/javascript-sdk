/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import ProblemHttpResult from '../model/ProblemHttpResult';

/**
* Log service.
* @module api/LogApi
* @version 1
*/
export default class LogApi {

    /**
    * Constructs a new LogApi. 
    * @alias module:api/LogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List events
     * Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
     * @param {Object} opts Optional parameters
     * @param {Number} [companyId] Company id
     * @param {String} [endpoint] 
     * @param {String} [method] 
     * @param {Number} [apiVerion] Api version
     * @param {Number} [statusCode] Response status code
     * @param {Date} [dateCreatedFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [dateCreatedTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Number} [page = 1)] Page number.
     * @param {Number} [pageSize = 100)] Items per page. Cannot be greater than 200.
     * @param {String} [sort] Sort by field. Prefix with '-' for descending order.
     * @param {String} [query] 
     * @param {Boolean} [success] 
     * @param {Date} [dateTimeFrom] Date and time of the event
     * @param {Date} [dateTimeTo] Date and time of the event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    logGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'company_id': opts['companyId'],
        'endpoint': opts['endpoint'],
        'method': opts['method'],
        'api_verion': opts['apiVerion'],
        'status_code': opts['statusCode'],
        'date_created_from': opts['dateCreatedFrom'],
        'date_created_to': opts['dateCreatedTo'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'query': opts['query'],
        'success': opts['success'],
        'date_time_from': opts['dateTimeFrom'],
        'date_time_to': opts['dateTimeTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List events
     * Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.companyId Company id
     * @param {String} opts.endpoint 
     * @param {String} opts.method 
     * @param {Number} opts.apiVerion Api version
     * @param {Number} opts.statusCode Response status code
     * @param {Date} opts.dateCreatedFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.dateCreatedTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Number} opts.page Page number. (default to 1)
     * @param {Number} opts.pageSize Items per page. Cannot be greater than 200. (default to 100)
     * @param {String} opts.sort Sort by field. Prefix with '-' for descending order.
     * @param {String} opts.query 
     * @param {Boolean} opts.success 
     * @param {Date} opts.dateTimeFrom Date and time of the event
     * @param {Date} opts.dateTimeTo Date and time of the event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    logGet(opts) {
      return this.logGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an event by id
     * Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Event} and HTTP response
     */
    logIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/log/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an event by id
     * Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Event}
     */
    logIdGet(id) {
      return this.logIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
