/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Company model module.
 * @module model/Company
 * @version main
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * A company model.
     * @alias module:model/Company
     * @param vat {String} Vat number. Must include the country code.
     * @param fiscalCode {String} Fiscal code. In most cases it's the same as the vat number.
     * @param name {String} Name
     */
    constructor(vat, fiscalCode, name) { 
        
        Company.initialize(this, vat, fiscalCode, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, vat, fiscalCode, name) { 
        obj['vat'] = vat;
        obj['fiscal_code'] = fiscalCode;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Company} obj Optional instance to populate.
     * @return {module:model/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = ApiClient.convertToType(data['vat'], 'String');
            }
            if (data.hasOwnProperty('fiscal_code')) {
                obj['fiscal_code'] = ApiClient.convertToType(data['fiscal_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Company.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['vat'] && !(typeof data['vat'] === 'string' || data['vat'] instanceof String)) {
            throw new Error("Expected the field `vat` to be a primitive type in the JSON string but got " + data['vat']);
        }
        // ensure the json data is a string
        if (data['fiscal_code'] && !(typeof data['fiscal_code'] === 'string' || data['fiscal_code'] instanceof String)) {
            throw new Error("Expected the field `fiscal_code` to be a primitive type in the JSON string but got " + data['fiscal_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Company.RequiredProperties = ["vat", "fiscal_code", "name"];

/**
 * Unique identifier. Leave it at 0 for new records as it will be set automatically.
 * @member {Number} id
 */
Company.prototype['id'] = undefined;

/**
 * Creation date. It is set automatically.
 * @member {Date} created
 */
Company.prototype['created'] = undefined;

/**
 * Row version, for optimistic concurrency. It is set automatically.
 * @member {Number} version
 */
Company.prototype['version'] = undefined;

/**
 * User id.
 * @member {Number} user_id
 */
Company.prototype['user_id'] = undefined;

/**
 * Vat number. Must include the country code.
 * @member {String} vat
 */
Company.prototype['vat'] = undefined;

/**
 * Fiscal code. In most cases it's the same as the vat number.
 * @member {String} fiscal_code
 */
Company.prototype['fiscal_code'] = undefined;

/**
 * Name
 * @member {String} name
 */
Company.prototype['name'] = undefined;






export default Company;

