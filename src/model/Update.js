/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';

/**
 * The Update model module.
 * @module model/Update
 * @version 1
 */
class Update {
    /**
     * Constructs a new <code>Update</code>.
     * @alias module:model/Update
     */
    constructor() { 
        
        Update.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Update</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Update} obj Optional instance to populate.
     * @return {module:model/Update} The populated <code>Update</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Update();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'Number');
            }
            if (data.hasOwnProperty('send_id')) {
                obj['send_id'] = ApiClient.convertToType(data['send_id'], 'Number');
            }
            if (data.hasOwnProperty('date_sent')) {
                obj['date_sent'] = ApiClient.convertToType(data['date_sent'], 'Date');
            }
            if (data.hasOwnProperty('last_update')) {
                obj['last_update'] = ApiClient.convertToType(data['last_update'], 'Date');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('is_read')) {
                obj['is_read'] = ApiClient.convertToType(data['is_read'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Update</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Update</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['message_id'] && !(typeof data['message_id'] === 'string' || data['message_id'] instanceof String)) {
            throw new Error("Expected the field `message_id` to be a primitive type in the JSON string but got " + data['message_id']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique identifier. Leave it at 0 for new records as it will be set automatically.
 * @member {Number} id
 */
Update.prototype['id'] = undefined;

/**
 * Creation date. It is set automatically.
 * @member {Date} created
 */
Update.prototype['created'] = undefined;

/**
 * Row version, for optimistic concurrency. It is set automatically.
 * @member {Number} version
 */
Update.prototype['version'] = undefined;

/**
 * User id.
 * @member {Number} user_id
 */
Update.prototype['user_id'] = undefined;

/**
 * Company id.
 * @member {Number} company_id
 */
Update.prototype['company_id'] = undefined;

/**
 * Send id. This is the id of the sent invoice to which this update refers to.
 * @member {Number} send_id
 */
Update.prototype['send_id'] = undefined;

/**
 * When the document was sent to the SDI.
 * @member {Date} date_sent
 */
Update.prototype['date_sent'] = undefined;

/**
 * Last update from SDI.
 * @member {Date} last_update
 */
Update.prototype['last_update'] = undefined;

/**
 * SDI identifier. This is set by the SDI and it is unique within the SDI system.
 * @member {String} identifier
 */
Update.prototype['identifier'] = undefined;

/**
 * State of the document. Theses are the possible values, as per the SDI documentation:
 * @member {module:model/Update.StateEnum} state
 */
Update.prototype['state'] = undefined;

/**
 * Description for the state.
 * @member {String} description
 */
Update.prototype['description'] = undefined;

/**
 * SDI message id.
 * @member {String} message_id
 */
Update.prototype['message_id'] = undefined;

/**
 * SDI errors, if any.
 * @member {Array.<module:model/Error>} errors
 */
Update.prototype['errors'] = undefined;

/**
 * Wether the item has been read at least once.
 * @member {Boolean} is_read
 */
Update.prototype['is_read'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Update['StateEnum'] = {

    /**
     * value: "Inviato"
     * @const
     */
    "Inviato": "Inviato",

    /**
     * value: "Consegnato"
     * @const
     */
    "Consegnato": "Consegnato",

    /**
     * value: "NonConsegnato"
     * @const
     */
    "NonConsegnato": "NonConsegnato",

    /**
     * value: "Scartato"
     * @const
     */
    "Scartato": "Scartato",

    /**
     * value: "AccettatoDalDestinatario"
     * @const
     */
    "AccettatoDalDestinatario": "AccettatoDalDestinatario",

    /**
     * value: "RifiutatoDalDestinatario"
     * @const
     */
    "RifiutatoDalDestinatario": "RifiutatoDalDestinatario",

    /**
     * value: "ImpossibilitàDiRecapito"
     * @const
     */
    "ImpossibilitàDiRecapito": "ImpossibilitàDiRecapito",

    /**
     * value: "DecorrenzaTermini"
     * @const
     */
    "DecorrenzaTermini": "DecorrenzaTermini",

    /**
     * value: "AttestazioneTrasmissioneFattura"
     * @const
     */
    "AttestazioneTrasmissioneFattura": "AttestazioneTrasmissioneFattura"
};



export default Update;

