/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentData from './DocumentData';

/**
 * The SendReduced model module.
 * @module model/SendReduced
 * @version 1
 */
class SendReduced {
    /**
     * Constructs a new <code>SendReduced</code>.
     * Reduced Send data for Update responses, containing only the essential fields.
     * @alias module:model/SendReduced
     */
    constructor() { 
        
        SendReduced.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendReduced</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendReduced} obj Optional instance to populate.
     * @return {module:model/SendReduced} The populated <code>SendReduced</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendReduced();

            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('prestatore')) {
                obj['prestatore'] = ApiClient.convertToType(data['prestatore'], 'String');
            }
            if (data.hasOwnProperty('meta_data')) {
                obj['meta_data'] = ApiClient.convertToType(data['meta_data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentData]);
            }
            if (data.hasOwnProperty('date_sent')) {
                obj['date_sent'] = ApiClient.convertToType(data['date_sent'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendReduced</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendReduced</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['prestatore'] && !(typeof data['prestatore'] === 'string' || data['prestatore'] instanceof String)) {
            throw new Error("Expected the field `prestatore` to be a primitive type in the JSON string but got " + data['prestatore']);
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                DocumentData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * SDI identifier.
 * @member {String} identifier
 */
SendReduced.prototype['identifier'] = undefined;

/**
 * VAT number of the Cedente/Prestatore (vendor).
 * @member {String} prestatore
 */
SendReduced.prototype['prestatore'] = undefined;

/**
 * Optional metadata, as json.
 * @member {Object.<String, String>} meta_data
 */
SendReduced.prototype['meta_data'] = undefined;

/**
 * The invoices included in the payload.
 * @member {Array.<module:model/DocumentData>} documents
 */
SendReduced.prototype['documents'] = undefined;

/**
 * When the invoice was sent to SDI.
 * @member {Date} date_sent
 */
SendReduced.prototype['date_sent'] = undefined;






export default SendReduced;

