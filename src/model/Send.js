/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Company from './Company';
import DocumentData from './DocumentData';

/**
 * The Send model module.
 * @module model/Send
 * @version 1
 */
class Send {
    /**
     * Constructs a new <code>Send</code>.
     * @alias module:model/Send
     */
    constructor() { 
        
        Send.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Send</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Send} obj Optional instance to populate.
     * @return {module:model/Send} The populated <code>Send</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Send();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'Number');
            }
            if (data.hasOwnProperty('committente')) {
                obj['committente'] = ApiClient.convertToType(data['committente'], 'String');
            }
            if (data.hasOwnProperty('prestatore')) {
                obj['prestatore'] = ApiClient.convertToType(data['prestatore'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('last_update')) {
                obj['last_update'] = ApiClient.convertToType(data['last_update'], 'Date');
            }
            if (data.hasOwnProperty('date_sent')) {
                obj['date_sent'] = ApiClient.convertToType(data['date_sent'], 'Date');
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentData]);
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('meta_data')) {
                obj['meta_data'] = ApiClient.convertToType(data['meta_data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Company.constructFromObject(data['company']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Send</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Send</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['committente'] && !(typeof data['committente'] === 'string' || data['committente'] instanceof String)) {
            throw new Error("Expected the field `committente` to be a primitive type in the JSON string but got " + data['committente']);
        }
        // ensure the json data is a string
        if (data['prestatore'] && !(typeof data['prestatore'] === 'string' || data['prestatore'] instanceof String)) {
            throw new Error("Expected the field `prestatore` to be a primitive type in the JSON string but got " + data['prestatore']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                DocumentData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Company.validateJSON(data['company']);
        }

        return true;
    }


}



/**
 * Unique identifier. Leave it at 0 for new records as it will be set automatically.
 * @member {Number} id
 */
Send.prototype['id'] = undefined;

/**
 * Creation date. It is set automatically.
 * @member {Date} created
 */
Send.prototype['created'] = undefined;

/**
 * Row version, for optimistic concurrency. It is set automatically.
 * @member {Number} version
 */
Send.prototype['version'] = undefined;

/**
 * User id.
 * @member {Number} user_id
 */
Send.prototype['user_id'] = undefined;

/**
 * Company id. On send, this is the sender and must be set in advance. On receive, it will be  automatically set based on the recipient's VAT number. If a matching company is not found, the invoice will be rejected until the company is created.
 * @member {Number} company_id
 */
Send.prototype['company_id'] = undefined;

/**
 * VAT number of the Cessionario/Committente (customer). This is automatically set based on the recipient's VAT number.
 * @member {String} committente
 */
Send.prototype['committente'] = undefined;

/**
 * VAT number of the Cedente/Prestatore (vendor). This is automatically set based on the sender's VAT number.
 * @member {String} prestatore
 */
Send.prototype['prestatore'] = undefined;

/**
 * SDI identifier. This is set by the SDI and is guaranted to be unique within the SDI system.
 * @member {String} identifier
 */
Send.prototype['identifier'] = undefined;

/**
 * Xml file name.
 * @member {String} file_name
 */
Send.prototype['file_name'] = undefined;

/**
 * SDI format (FPA12, FPR12, FSM10, ...)
 * @member {String} format
 */
Send.prototype['format'] = undefined;

/**
 * Xml payloaad. This is the actual xml content, as string. On send, it can be base64 encoded. If it's not, it will be encoded before sending. It is guaranteed to be cyphered at rest.
 * @member {String} payload
 */
Send.prototype['payload'] = undefined;

/**
 * Last update from SDI.
 * @member {Date} last_update
 */
Send.prototype['last_update'] = undefined;

/**
 * When the invoice was sent to SDI.
 * @member {Date} date_sent
 */
Send.prototype['date_sent'] = undefined;

/**
 * The invoices included in the payload. This is set by the system, based on the xml content.
 * @member {Array.<module:model/DocumentData>} documents
 */
Send.prototype['documents'] = undefined;

/**
 * Whether the payload is Base64 encoded or a plain XML (text).
 * @member {module:model/Send.EncodingEnum} encoding
 */
Send.prototype['encoding'] = undefined;

/**
 * Optional metadata, as json.
 * @member {Object.<String, String>} meta_data
 */
Send.prototype['meta_data'] = undefined;

/**
 * @member {module:model/Company} company
 */
Send.prototype['company'] = undefined;





/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
Send['EncodingEnum'] = {

    /**
     * value: "Xml"
     * @const
     */
    "Xml": "Xml",

    /**
     * value: "Base64"
     * @const
     */
    "Base64": "Base64"
};



export default Send;

