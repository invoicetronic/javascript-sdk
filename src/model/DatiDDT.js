/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatiDDT model module.
 * @module model/DatiDDT
 * @version 1
 */
class DatiDDT {
    /**
     * Constructs a new <code>DatiDDT</code>.
     * @alias module:model/DatiDDT
     */
    constructor() { 
        
        DatiDDT.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatiDDT</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatiDDT} obj Optional instance to populate.
     * @return {module:model/DatiDDT} The populated <code>DatiDDT</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatiDDT();

            if (data.hasOwnProperty('numero_ddt')) {
                obj['numero_ddt'] = ApiClient.convertToType(data['numero_ddt'], 'String');
            }
            if (data.hasOwnProperty('data_ddt')) {
                obj['data_ddt'] = ApiClient.convertToType(data['data_ddt'], 'Date');
            }
            if (data.hasOwnProperty('riferimento_numero_linea')) {
                obj['riferimento_numero_linea'] = ApiClient.convertToType(data['riferimento_numero_linea'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatiDDT</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatiDDT</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['numero_ddt'] && !(typeof data['numero_ddt'] === 'string' || data['numero_ddt'] instanceof String)) {
            throw new Error("Expected the field `numero_ddt` to be a primitive type in the JSON string but got " + data['numero_ddt']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['riferimento_numero_linea'])) {
            throw new Error("Expected the field `riferimento_numero_linea` to be an array in the JSON data but got " + data['riferimento_numero_linea']);
        }

        return true;
    }


}



/**
 * @member {String} numero_ddt
 */
DatiDDT.prototype['numero_ddt'] = undefined;

/**
 * @member {Date} data_ddt
 */
DatiDDT.prototype['data_ddt'] = undefined;

/**
 * @member {Array.<Number>} riferimento_numero_linea
 */
DatiDDT.prototype['riferimento_numero_linea'] = undefined;






export default DatiDDT;

